local player = game.Players.LocalPlayer
local mobsFolder = game.Workspace.Mobs -- Assuming the folder is named "Mobs"
local attackRange = 100 -- Define the range within which the autokill function should activate

-- Function to automatically attack the closest mob
local function autokill()
    local closestCollider = nil
    local attackDistance = 100 -- Updated attack distance to 100 units
    local currentTime = os.clock()
    local cooldown = 0.5 -- Cooldown time in seconds
    local lastAttackTime = player:GetAttribute("LastAttackTime") or 0

    if currentTime - lastAttackTime >= cooldown then
        -- Iterate through all colliders in the Mobs folder
        for _, mob in ipairs(mobsFolder:GetChildren()) do
            if mob:IsA("Model") then
                local collider = mob:FindFirstChild("Collider")
                local health = mob:FindFirstChild("HealthProperties") and mob.HealthProperties.Health
                if collider and health and health.Value > 0 then
                    local distance = (player.Character.HumanoidRootPart.Position - collider.Position).Magnitude
                    if distance <= attackDistance and (not closestCollider or distance < (player.Character.HumanoidRootPart.Position - closestCollider.Position).Magnitude) then
                        closestCollider = collider
                    end
                end
            end
        end

        if closestCollider then
            -- Type Of Attack
            local args = {
                [1] = "Mage1",
                [2] = closestCollider.Position
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Combat"):WaitForChild("Attack"):FireServer(unpack(args))
            player:SetAttribute("LastAttackTime", currentTime)
        end
    end
end

-- Function to check if a mob is within range
local function checkMobProximity()
    local playerPosition = player.Character.HumanoidRootPart.Position
    for _, mob in ipairs(mobsFolder:GetChildren()) do
        if mob:IsA("Model") then
            local collider = mob:FindFirstChild("Collider")
            if collider then
                local distance = (playerPosition - collider.Position).Magnitude
                if distance <= attackRange then
                    autokill() -- Activate autokill function if a mob is within range
                    return
                end
            end
        end
    end
end

-- Connect the checkMobProximity function to the RunService.Heartbeat event to continuously check for nearby mobs
game:GetService("RunService").Heartbeat:Connect(checkMobProximity)


-- Function to get a position on a circle around a point, while keeping a height offset
local function getCirclePosition(center, radius, angle, height)
    local x = center.X + radius * math.cos(angle)
    local y = center.Y + height
    local z = center.Z + radius * math.sin(angle)
    return Vector3.new(x, y, z)
end

local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

-- AntiFall part
local part = Instance.new("Part")
part.Size = Vector3.new(10, 1, 10)
part.Anchored = true
part.BrickColor = BrickColor.new("Green")
part.Position = Vector3.new(10, 3, -5)
part.Name = "AntiFall"
part.Material = Enum.Material.ForceField

local offset = Vector3.new(0, -4.5, 0)

local function updatePosition()
    local player = Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = player.Character.HumanoidRootPart
        part.Position = hrp.Position + offset
        part.CFrame = CFrame.new(part.Position, part.Position + hrp.CFrame.LookVector)
    end
end

part.Parent = game.Players.LocalPlayer.Character
RunService.RenderStepped:Connect(updatePosition)

RunService.Heartbeat:Connect(function()
    local humanoidRootPart = Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart then
        local closestDistance = math.huge
        local closestCollider = nil
        
        -- Find the closest live mob
        for _, mobModel in ipairs(Workspace.Mobs:GetChildren()) do
            local collider = mobModel:FindFirstChild("Collider")
            if collider then
                local health = mobModel:FindFirstChild("HealthProperties") and mobModel.HealthProperties.Health
                if health and health.Value > 0 then
                    local distance = (collider.Position - humanoidRootPart.Position).magnitude
                    if distance < closestDistance then
                        closestDistance = distance
                        closestCollider = collider
                    end
                end
            end
        end
        
        -- If there's a live mob
        if closestCollider then
            -- Calculate the radius, height offset, and angles for the circular motion
            local radius = 35
            local heightOffset = 35
            local angle = tick() % (10 * math.pi)
            
            -- Calculate the target position on the circle
            local targetPosition = getCirclePosition(closestCollider.Position, radius, angle, heightOffset)
            
            -- Tweening
            local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
            local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPosition)})
            tween:Play()
        end
    end
end)
